{"version":3,"file":"commonHelpers.js","sources":["../src/js/index.js"],"sourcesContent":["// Described in the documentation\nimport iziToast from \"izitoast\";\n// Additional import for styles\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Get references to form elements\nconst form = document.querySelector('.search-form');\nconst queryInput = document.querySelector('.image-query');\n\n// Add event listener for form submission\nform.addEventListener('submit', function(event) {\n    // Prevent default form behavior\n    event.preventDefault();\n\n    // Get the value entered by the user\n    const query = queryInput.value.trim();\n\n    // Check if the search field is empty\n    if (query === '') {\n        // Show error message using iziToast library\n        iziToast.show({\n            title: 'Error',\n            message: 'Please enter a search query.',\n            backgroundColor: '#ff0000', // Set red background color for error message\n            timeout: 5000 // Set the time (in milliseconds) for which the message will be visible (in this case - 5 seconds)\n        });\n        return; // Exit the function if the search field is empty\n    }\n\n    // Call the function to perform the search (your own logic)\n    performSearch(query);\n});\n\n// Function to perform the search (example)\nasync function performSearch(query) {\n    // Your search logic here\n    // Call the function to make an HTTP request to the Pixabay API\n    try {\n        await searchImages(query);\n    } catch (error) {\n        console.error('Error performing search:', error.message);\n    }\n}\n\n// Function to make an HTTP request to the Pixabay API\nasync function searchImages(query) {\n    // Variable with the API key for the Pixabay API\n    const API_KEY = '42262858-7b31826aafbc45fb5436f2ee9'; // Declare API_KEY at the beginning of the function\n\n    const url = `https://pixabay.com/api/?key=${API_KEY}&q=${encodeURIComponent(query)}&image_type=photo&orientation=horizontal&safesearch=true`;\n\n    try {\n        const response = await fetch(url);\n\n        if (!response.ok) {\n            throw new Error('An error occurred while making the request.');\n        }\n\n        const data = await response.json();\n\n        if (data.hits.length === 0) {\n            // Show message about no results using the iziToast library\n            iziToast.error({\n                title: 'Error',\n                message: 'Sorry, there are no images matching your search query. Please try again!'\n            });\n        } else {\n            // Process the received data and display the images in your web application\n            displayImages(data.hits);\n        }\n    } catch (error) {\n        console.error('Error:', error.message);\n        // Handling error while making the request\n        // You can also show an error message using the iziToast library\n        throw error; // Pass the error up for handling above\n    }\n}\n\n// Function to display images in your web application\nfunction displayImages(images) {\n    // Your logic for displaying images\n    console.log(images); // Example: outputting received images to the console\n}"],"names":["form","queryInput","event","query","iziToast","performSearch","searchImages","error","url","response","data","displayImages","images"],"mappings":"svBAMA,MAAMA,EAAO,SAAS,cAAc,cAAc,EAC5CC,EAAa,SAAS,cAAc,cAAc,EAGxDD,EAAK,iBAAiB,SAAU,SAASE,EAAO,CAE5CA,EAAM,eAAc,EAGpB,MAAMC,EAAQF,EAAW,MAAM,KAAI,EAGnC,GAAIE,IAAU,GAAI,CAEdC,EAAS,KAAK,CACV,MAAO,QACP,QAAS,+BACT,gBAAiB,UACjB,QAAS,GACrB,CAAS,EACD,MACH,CAGDC,EAAcF,CAAK,CACvB,CAAC,EAGD,eAAeE,EAAcF,EAAO,CAGhC,GAAI,CACA,MAAMG,EAAaH,CAAK,CAC3B,OAAQI,EAAO,CACZ,QAAQ,MAAM,2BAA4BA,EAAM,OAAO,CAC1D,CACL,CAGA,eAAeD,EAAaH,EAAO,CAI/B,MAAMK,EAAM,qEAA6C,mBAAmBL,CAAK,CAAC,2DAElF,GAAI,CACA,MAAMM,EAAW,MAAM,MAAMD,CAAG,EAEhC,GAAI,CAACC,EAAS,GACV,MAAM,IAAI,MAAM,6CAA6C,EAGjE,MAAMC,EAAO,MAAMD,EAAS,OAExBC,EAAK,KAAK,SAAW,EAErBN,EAAS,MAAM,CACX,MAAO,QACP,QAAS,0EACzB,CAAa,EAGDO,EAAcD,EAAK,IAAI,CAE9B,OAAQH,EAAO,CACZ,cAAQ,MAAM,SAAUA,EAAM,OAAO,EAG/BA,CACT,CACL,CAGA,SAASI,EAAcC,EAAQ,CAE3B,QAAQ,IAAIA,CAAM,CACtB"}